# frontend_pms.py

import streamlit as st
import pandas as pd
from backend_pms import ProjectDB
from datetime import date

# --- App Configuration ---
st.set_page_config(page_title="Project Management System", layout="wide")

# --- Database Initialization ---
try:
    db = ProjectDB()
except Exception as e:
    st.error(f"Failed to connect to the database: {e}")
    st.stop()

# --- Sidebar for Creating New Entries ---
st.sidebar.title("🛠️ Actions")

# Form to add a new project
with st.sidebar.expander("➕ Create New Project"):
    with st.form("new_project_form", clear_on_submit=True):
        project_name = st.text_input("Project Name")
        start_date = st.date_input("Start Date", date.today())
        due_date = st.date_input("Due Date")
        if st.form_submit_button("Create Project"):
            db.create_project(project_name, start_date, due_date)
            st.sidebar.success("Project created!")

# Form to add a new team member
with st.sidebar.expander("👤 Create New Team Member"):
    with st.form("new_member_form", clear_on_submit=True):
        member_name = st.text_input("Member Name")
        member_role = st.text_input("Role (e.g., Developer)")
        if st.form_submit_button("Create Member"):
            db.create_member(member_name, member_role)
            st.sidebar.success("Team member added!")

# --- Main Application UI ---
st.title("📊 Simple Project Management System")

# Selector for viewing a specific project
projects = db.read_all_projects()
if not projects:
    st.info("No projects found. Create one using the sidebar to get started!")
else:
    project_dict = {name: pid for pid, name in projects}
    selected_project_name = st.selectbox("Select a Project to View", options=project_dict.keys())
    selected_project_id = project_dict[selected_project_name]

    st.header(f"Dashboard for: {selected_project_name}")

    # --- Business Insights Section ---
    insights = db.get_project_insights(selected_project_id)
    total_tasks = insights['total_tasks']
    done_tasks = insights['done_tasks']
    completion_percentage = (done_tasks / total_tasks * 100) if total_tasks > 0 else 0

    st.progress(completion_percentage / 100, text=f"Project Completion: {completion_percentage:.1f}%")

    c1, c2, c3 = st.columns(3)
    c1.metric("Total Tasks (COUNT)", f"{total_tasks}")
    c2.metric("Completed Tasks (COUNT)", f"{done_tasks}")
    c3.metric("Total Hours (SUM)", f"{insights['total_hours']:.1f} hrs")

    c4, c5, c6 = st.columns(3)
    c4.metric("Avg. Hours/Task (AVG)", f"{insights['avg_hours']:.1f}")
    c5.metric("Min Hours on a Task (MIN)", f"{insights['min_hours']:.1f}")
    c6.metric("Max Hours on a Task (MAX)", f"{insights['max_hours']:.1f}")

    st.markdown("---")

    # --- Task Management Section ---
    col1, col2 = st.columns(2)

    # Display existing tasks
    with col1:
        st.subheader("📋 Project Tasks")
        tasks = db.read_tasks_for_project(selected_project_id)
        if not tasks:
            st.write("No tasks yet for this project.")
        else:
            for task_id, desc, member, status, hours in tasks:
                with st.container(border=True):
                    st.write(f"**Task:** {desc}")
                    st.write(f"**Assigned to:** {member} | **Hours:** {hours} | **Status:** {status}")
                    new_status = st.selectbox(
                        "Update Status",
                        options=['To Do', 'In Progress', 'Done'],
                        index=['To Do', 'In Progress', 'Done'].index(status),
                        key=f"status_{task_id}"
                    )
                    if st.button("Update", key=f"update_{task_id}"):
                        db.update_task_status(task_id, new_status)
                        st.success(f"Task '{desc[:30]}...' updated!")
                        st.rerun()

    # Form to add a new task
    with col2:
        st.subheader("➕ Add New Task")
        with st.form("new_task_form", clear_on_submit=True):
            members = db.read_all_members()
            member_dict = {name: mid for mid, name in members}
            task_desc = st.text_area("Task Description")
            assigned_member_name = st.selectbox("Assign to", options=member_dict.keys())
            task_status = st.selectbox("Initial Status", options=['To Do', 'In Progress', 'Done'])
            task_hours = st.number_input("Estimated Hours", min_value=0.0, step=0.5)

            if st.form_submit_button("Add Task"):
                assigned_member_id = member_dict[assigned_member_name]
                db.create_task(selected_project_id, assigned_member_id, task_desc, task_status, task_hours)
                st.success("Task added to project!")
                st.rerun()
